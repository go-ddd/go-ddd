// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/galaxyobe/go-ddd/pkg/domain/database/do"
	"github.com/galaxyobe/go-ddd/pkg/domain/eventsouring/repository/do/predicate"
	"github.com/galaxyobe/go-ddd/pkg/domain/eventsouring/vo"
	"github.com/galaxyobe/go-ddd/pkg/types"
)

// ID filters vertices based on their ID field.
func ID(id types.UUID) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id types.UUID) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id types.UUID) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...types.UUID) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...types.UUID) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id types.UUID) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id types.UUID) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id types.UUID) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id types.UUID) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AggregateID applies equality check predicate on the "aggregate_id" field. It's identical to AggregateIDEQ.
func AggregateID(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAggregateID), vc))
	})
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgID), vc))
	})
}

// InstanceID applies equality check predicate on the "instance_id" field. It's identical to InstanceIDEQ.
func InstanceID(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceID), vc))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v types.Version) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), vc))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), vc))
	})
}

// AggregateType applies equality check predicate on the "aggregate_type" field. It's identical to AggregateTypeEQ.
func AggregateType(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAggregateType), vc))
	})
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v do.StringMap) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetadata), v))
	})
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// Sequence applies equality check predicate on the "sequence" field. It's identical to SequenceEQ.
func Sequence(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequence), v))
	})
}

// PreviousAggregateSequence applies equality check predicate on the "previous_aggregate_sequence" field. It's identical to PreviousAggregateSequenceEQ.
func PreviousAggregateSequence(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreviousAggregateSequence), v))
	})
}

// PreviousAggregateTypeSequence applies equality check predicate on the "previous_aggregate_type_sequence" field. It's identical to PreviousAggregateTypeSequenceEQ.
func PreviousAggregateTypeSequence(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreviousAggregateTypeSequence), v))
	})
}

// Service applies equality check predicate on the "service" field. It's identical to ServiceEQ.
func Service(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldService), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// AggregateIDEQ applies the EQ predicate on the "aggregate_id" field.
func AggregateIDEQ(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDNEQ applies the NEQ predicate on the "aggregate_id" field.
func AggregateIDNEQ(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDIn applies the In predicate on the "aggregate_id" field.
func AggregateIDIn(vs ...types.UUID) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAggregateID), v...))
	})
}

// AggregateIDNotIn applies the NotIn predicate on the "aggregate_id" field.
func AggregateIDNotIn(vs ...types.UUID) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAggregateID), v...))
	})
}

// AggregateIDGT applies the GT predicate on the "aggregate_id" field.
func AggregateIDGT(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDGTE applies the GTE predicate on the "aggregate_id" field.
func AggregateIDGTE(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDLT applies the LT predicate on the "aggregate_id" field.
func AggregateIDLT(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDLTE applies the LTE predicate on the "aggregate_id" field.
func AggregateIDLTE(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDContains applies the Contains predicate on the "aggregate_id" field.
func AggregateIDContains(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDHasPrefix applies the HasPrefix predicate on the "aggregate_id" field.
func AggregateIDHasPrefix(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDHasSuffix applies the HasSuffix predicate on the "aggregate_id" field.
func AggregateIDHasSuffix(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDEqualFold applies the EqualFold predicate on the "aggregate_id" field.
func AggregateIDEqualFold(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAggregateID), vc))
	})
}

// AggregateIDContainsFold applies the ContainsFold predicate on the "aggregate_id" field.
func AggregateIDContainsFold(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAggregateID), vc))
	})
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrgID), vc))
	})
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrgID), vc))
	})
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...types.UUID) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrgID), v...))
	})
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...types.UUID) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrgID), v...))
	})
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrgID), vc))
	})
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrgID), vc))
	})
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrgID), vc))
	})
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrgID), vc))
	})
}

// OrgIDContains applies the Contains predicate on the "org_id" field.
func OrgIDContains(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrgID), vc))
	})
}

// OrgIDHasPrefix applies the HasPrefix predicate on the "org_id" field.
func OrgIDHasPrefix(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrgID), vc))
	})
}

// OrgIDHasSuffix applies the HasSuffix predicate on the "org_id" field.
func OrgIDHasSuffix(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrgID), vc))
	})
}

// OrgIDEqualFold applies the EqualFold predicate on the "org_id" field.
func OrgIDEqualFold(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrgID), vc))
	})
}

// OrgIDContainsFold applies the ContainsFold predicate on the "org_id" field.
func OrgIDContainsFold(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrgID), vc))
	})
}

// InstanceIDEQ applies the EQ predicate on the "instance_id" field.
func InstanceIDEQ(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDNEQ applies the NEQ predicate on the "instance_id" field.
func InstanceIDNEQ(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDIn applies the In predicate on the "instance_id" field.
func InstanceIDIn(vs ...types.UUID) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInstanceID), v...))
	})
}

// InstanceIDNotIn applies the NotIn predicate on the "instance_id" field.
func InstanceIDNotIn(vs ...types.UUID) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInstanceID), v...))
	})
}

// InstanceIDGT applies the GT predicate on the "instance_id" field.
func InstanceIDGT(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDGTE applies the GTE predicate on the "instance_id" field.
func InstanceIDGTE(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDLT applies the LT predicate on the "instance_id" field.
func InstanceIDLT(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDLTE applies the LTE predicate on the "instance_id" field.
func InstanceIDLTE(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDContains applies the Contains predicate on the "instance_id" field.
func InstanceIDContains(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDHasPrefix applies the HasPrefix predicate on the "instance_id" field.
func InstanceIDHasPrefix(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDHasSuffix applies the HasSuffix predicate on the "instance_id" field.
func InstanceIDHasSuffix(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDEqualFold applies the EqualFold predicate on the "instance_id" field.
func InstanceIDEqualFold(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceID), vc))
	})
}

// InstanceIDContainsFold applies the ContainsFold predicate on the "instance_id" field.
func InstanceIDContainsFold(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceID), vc))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v types.Version) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v types.Version) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...types.Version) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...types.Version) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v types.Version) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v types.Version) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v types.Version) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v types.Version) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v types.Version) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVersion), vc))
	})
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v types.Version) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVersion), vc))
	})
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v types.Version) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVersion), vc))
	})
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v types.Version) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVersion), vc))
	})
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v types.Version) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVersion), vc))
	})
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), vc))
	})
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreator), vc))
	})
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...types.UUID) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreator), v...))
	})
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...types.UUID) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreator), v...))
	})
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreator), vc))
	})
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreator), vc))
	})
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreator), vc))
	})
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreator), vc))
	})
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreator), vc))
	})
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreator), vc))
	})
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreator), vc))
	})
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreator), vc))
	})
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v types.UUID) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreator), vc))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), vc))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), vc))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...vo.EventType) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...vo.EventType) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), vc))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), vc))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), vc))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), vc))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), vc))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), vc))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), vc))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), vc))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v vo.EventType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), vc))
	})
}

// AggregateTypeEQ applies the EQ predicate on the "aggregate_type" field.
func AggregateTypeEQ(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeNEQ applies the NEQ predicate on the "aggregate_type" field.
func AggregateTypeNEQ(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeIn applies the In predicate on the "aggregate_type" field.
func AggregateTypeIn(vs ...vo.AggregateType) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAggregateType), v...))
	})
}

// AggregateTypeNotIn applies the NotIn predicate on the "aggregate_type" field.
func AggregateTypeNotIn(vs ...vo.AggregateType) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAggregateType), v...))
	})
}

// AggregateTypeGT applies the GT predicate on the "aggregate_type" field.
func AggregateTypeGT(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeGTE applies the GTE predicate on the "aggregate_type" field.
func AggregateTypeGTE(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeLT applies the LT predicate on the "aggregate_type" field.
func AggregateTypeLT(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeLTE applies the LTE predicate on the "aggregate_type" field.
func AggregateTypeLTE(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeContains applies the Contains predicate on the "aggregate_type" field.
func AggregateTypeContains(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeHasPrefix applies the HasPrefix predicate on the "aggregate_type" field.
func AggregateTypeHasPrefix(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeHasSuffix applies the HasSuffix predicate on the "aggregate_type" field.
func AggregateTypeHasSuffix(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeEqualFold applies the EqualFold predicate on the "aggregate_type" field.
func AggregateTypeEqualFold(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAggregateType), vc))
	})
}

// AggregateTypeContainsFold applies the ContainsFold predicate on the "aggregate_type" field.
func AggregateTypeContainsFold(v vo.AggregateType) predicate.Event {
	vc := string(v)
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAggregateType), vc))
	})
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v do.StringMap) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetadata), v))
	})
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v do.StringMap) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMetadata), v))
	})
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...do.StringMap) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMetadata), v...))
	})
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...do.StringMap) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMetadata), v...))
	})
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v do.StringMap) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMetadata), v))
	})
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v do.StringMap) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMetadata), v))
	})
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v do.StringMap) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMetadata), v))
	})
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v do.StringMap) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMetadata), v))
	})
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMetadata)))
	})
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMetadata)))
	})
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldData), v))
	})
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldData), v...))
	})
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldData), v...))
	})
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldData), v))
	})
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldData), v))
	})
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldData), v))
	})
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldData), v))
	})
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldData)))
	})
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldData)))
	})
}

// SequenceEQ applies the EQ predicate on the "sequence" field.
func SequenceEQ(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequence), v))
	})
}

// SequenceNEQ applies the NEQ predicate on the "sequence" field.
func SequenceNEQ(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSequence), v))
	})
}

// SequenceIn applies the In predicate on the "sequence" field.
func SequenceIn(vs ...uint64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSequence), v...))
	})
}

// SequenceNotIn applies the NotIn predicate on the "sequence" field.
func SequenceNotIn(vs ...uint64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSequence), v...))
	})
}

// SequenceGT applies the GT predicate on the "sequence" field.
func SequenceGT(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSequence), v))
	})
}

// SequenceGTE applies the GTE predicate on the "sequence" field.
func SequenceGTE(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSequence), v))
	})
}

// SequenceLT applies the LT predicate on the "sequence" field.
func SequenceLT(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSequence), v))
	})
}

// SequenceLTE applies the LTE predicate on the "sequence" field.
func SequenceLTE(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSequence), v))
	})
}

// PreviousAggregateSequenceEQ applies the EQ predicate on the "previous_aggregate_sequence" field.
func PreviousAggregateSequenceEQ(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreviousAggregateSequence), v))
	})
}

// PreviousAggregateSequenceNEQ applies the NEQ predicate on the "previous_aggregate_sequence" field.
func PreviousAggregateSequenceNEQ(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPreviousAggregateSequence), v))
	})
}

// PreviousAggregateSequenceIn applies the In predicate on the "previous_aggregate_sequence" field.
func PreviousAggregateSequenceIn(vs ...uint64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPreviousAggregateSequence), v...))
	})
}

// PreviousAggregateSequenceNotIn applies the NotIn predicate on the "previous_aggregate_sequence" field.
func PreviousAggregateSequenceNotIn(vs ...uint64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPreviousAggregateSequence), v...))
	})
}

// PreviousAggregateSequenceGT applies the GT predicate on the "previous_aggregate_sequence" field.
func PreviousAggregateSequenceGT(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPreviousAggregateSequence), v))
	})
}

// PreviousAggregateSequenceGTE applies the GTE predicate on the "previous_aggregate_sequence" field.
func PreviousAggregateSequenceGTE(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPreviousAggregateSequence), v))
	})
}

// PreviousAggregateSequenceLT applies the LT predicate on the "previous_aggregate_sequence" field.
func PreviousAggregateSequenceLT(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPreviousAggregateSequence), v))
	})
}

// PreviousAggregateSequenceLTE applies the LTE predicate on the "previous_aggregate_sequence" field.
func PreviousAggregateSequenceLTE(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPreviousAggregateSequence), v))
	})
}

// PreviousAggregateTypeSequenceEQ applies the EQ predicate on the "previous_aggregate_type_sequence" field.
func PreviousAggregateTypeSequenceEQ(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreviousAggregateTypeSequence), v))
	})
}

// PreviousAggregateTypeSequenceNEQ applies the NEQ predicate on the "previous_aggregate_type_sequence" field.
func PreviousAggregateTypeSequenceNEQ(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPreviousAggregateTypeSequence), v))
	})
}

// PreviousAggregateTypeSequenceIn applies the In predicate on the "previous_aggregate_type_sequence" field.
func PreviousAggregateTypeSequenceIn(vs ...uint64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPreviousAggregateTypeSequence), v...))
	})
}

// PreviousAggregateTypeSequenceNotIn applies the NotIn predicate on the "previous_aggregate_type_sequence" field.
func PreviousAggregateTypeSequenceNotIn(vs ...uint64) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPreviousAggregateTypeSequence), v...))
	})
}

// PreviousAggregateTypeSequenceGT applies the GT predicate on the "previous_aggregate_type_sequence" field.
func PreviousAggregateTypeSequenceGT(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPreviousAggregateTypeSequence), v))
	})
}

// PreviousAggregateTypeSequenceGTE applies the GTE predicate on the "previous_aggregate_type_sequence" field.
func PreviousAggregateTypeSequenceGTE(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPreviousAggregateTypeSequence), v))
	})
}

// PreviousAggregateTypeSequenceLT applies the LT predicate on the "previous_aggregate_type_sequence" field.
func PreviousAggregateTypeSequenceLT(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPreviousAggregateTypeSequence), v))
	})
}

// PreviousAggregateTypeSequenceLTE applies the LTE predicate on the "previous_aggregate_type_sequence" field.
func PreviousAggregateTypeSequenceLTE(v uint64) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPreviousAggregateTypeSequence), v))
	})
}

// ServiceEQ applies the EQ predicate on the "service" field.
func ServiceEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldService), v))
	})
}

// ServiceNEQ applies the NEQ predicate on the "service" field.
func ServiceNEQ(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldService), v))
	})
}

// ServiceIn applies the In predicate on the "service" field.
func ServiceIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldService), v...))
	})
}

// ServiceNotIn applies the NotIn predicate on the "service" field.
func ServiceNotIn(vs ...string) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldService), v...))
	})
}

// ServiceGT applies the GT predicate on the "service" field.
func ServiceGT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldService), v))
	})
}

// ServiceGTE applies the GTE predicate on the "service" field.
func ServiceGTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldService), v))
	})
}

// ServiceLT applies the LT predicate on the "service" field.
func ServiceLT(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldService), v))
	})
}

// ServiceLTE applies the LTE predicate on the "service" field.
func ServiceLTE(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldService), v))
	})
}

// ServiceContains applies the Contains predicate on the "service" field.
func ServiceContains(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldService), v))
	})
}

// ServiceHasPrefix applies the HasPrefix predicate on the "service" field.
func ServiceHasPrefix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldService), v))
	})
}

// ServiceHasSuffix applies the HasSuffix predicate on the "service" field.
func ServiceHasSuffix(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldService), v))
	})
}

// ServiceEqualFold applies the EqualFold predicate on the "service" field.
func ServiceEqualFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldService), v))
	})
}

// ServiceContainsFold applies the ContainsFold predicate on the "service" field.
func ServiceContainsFold(v string) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldService), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Event {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		p(s.Not())
	})
}
