// Code generated by ent, DO NOT EDIT.

package do

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/galaxyobe/go-ddd/pkg/domain/database/do"
	"github.com/galaxyobe/go-ddd/pkg/domain/eventsouring/repository/do/event"
	"github.com/galaxyobe/go-ddd/pkg/domain/eventsouring/repository/do/predicate"
	"github.com/galaxyobe/go-ddd/pkg/domain/eventsouring/vo"
	"github.com/galaxyobe/go-ddd/pkg/types"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEvent = "Event"
)

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op                                  Op
	typ                                 string
	id                                  *string
	aggregate_id                        *string
	version                             *types.Version
	creator                             *string
	_type                               *vo.EventType
	aggregate_type                      *vo.AggregateType
	org_id                              *string
	instance_id                         *string
	metadata                            *do.StringMap
	data                                *[]byte
	sequence                            *uint64
	addsequence                         *int64
	previous_aggregate_sequence         *uint64
	addprevious_aggregate_sequence      *int64
	previous_aggregate_type_sequence    *uint64
	addprevious_aggregate_type_sequence *int64
	service                             *string
	create_time                         *time.Time
	clearedFields                       map[string]struct{}
	done                                bool
	oldValue                            func(context.Context) (*Event, error)
	predicates                          []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id string) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("do: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Event entities.
func (m *EventMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAggregateID sets the "aggregate_id" field.
func (m *EventMutation) SetAggregateID(s string) {
	m.aggregate_id = &s
}

// AggregateID returns the value of the "aggregate_id" field in the mutation.
func (m *EventMutation) AggregateID() (r string, exists bool) {
	v := m.aggregate_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAggregateID returns the old "aggregate_id" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldAggregateID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAggregateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAggregateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAggregateID: %w", err)
	}
	return oldValue.AggregateID, nil
}

// ResetAggregateID resets all changes to the "aggregate_id" field.
func (m *EventMutation) ResetAggregateID() {
	m.aggregate_id = nil
}

// SetVersion sets the "version" field.
func (m *EventMutation) SetVersion(t types.Version) {
	m.version = &t
}

// Version returns the value of the "version" field in the mutation.
func (m *EventMutation) Version() (r types.Version, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldVersion(ctx context.Context) (v types.Version, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *EventMutation) ResetVersion() {
	m.version = nil
}

// SetCreator sets the "creator" field.
func (m *EventMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *EventMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ResetCreator resets all changes to the "creator" field.
func (m *EventMutation) ResetCreator() {
	m.creator = nil
}

// SetType sets the "type" field.
func (m *EventMutation) SetType(vt vo.EventType) {
	m._type = &vt
}

// GetType returns the value of the "type" field in the mutation.
func (m *EventMutation) GetType() (r vo.EventType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldType(ctx context.Context) (v vo.EventType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *EventMutation) ResetType() {
	m._type = nil
}

// SetAggregateType sets the "aggregate_type" field.
func (m *EventMutation) SetAggregateType(vt vo.AggregateType) {
	m.aggregate_type = &vt
}

// AggregateType returns the value of the "aggregate_type" field in the mutation.
func (m *EventMutation) AggregateType() (r vo.AggregateType, exists bool) {
	v := m.aggregate_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAggregateType returns the old "aggregate_type" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldAggregateType(ctx context.Context) (v vo.AggregateType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAggregateType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAggregateType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAggregateType: %w", err)
	}
	return oldValue.AggregateType, nil
}

// ResetAggregateType resets all changes to the "aggregate_type" field.
func (m *EventMutation) ResetAggregateType() {
	m.aggregate_type = nil
}

// SetOrgID sets the "org_id" field.
func (m *EventMutation) SetOrgID(s string) {
	m.org_id = &s
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *EventMutation) OrgID() (r string, exists bool) {
	v := m.org_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldOrgID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *EventMutation) ResetOrgID() {
	m.org_id = nil
}

// SetInstanceID sets the "instance_id" field.
func (m *EventMutation) SetInstanceID(s string) {
	m.instance_id = &s
}

// InstanceID returns the value of the "instance_id" field in the mutation.
func (m *EventMutation) InstanceID() (r string, exists bool) {
	v := m.instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceID returns the old "instance_id" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceID: %w", err)
	}
	return oldValue.InstanceID, nil
}

// ResetInstanceID resets all changes to the "instance_id" field.
func (m *EventMutation) ResetInstanceID() {
	m.instance_id = nil
}

// SetMetadata sets the "metadata" field.
func (m *EventMutation) SetMetadata(dm do.StringMap) {
	m.metadata = &dm
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *EventMutation) Metadata() (r do.StringMap, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldMetadata(ctx context.Context) (v do.StringMap, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *EventMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[event.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *EventMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[event.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *EventMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, event.FieldMetadata)
}

// SetData sets the "data" field.
func (m *EventMutation) SetData(b []byte) {
	m.data = &b
}

// Data returns the value of the "data" field in the mutation.
func (m *EventMutation) Data() (r []byte, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ClearData clears the value of the "data" field.
func (m *EventMutation) ClearData() {
	m.data = nil
	m.clearedFields[event.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *EventMutation) DataCleared() bool {
	_, ok := m.clearedFields[event.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *EventMutation) ResetData() {
	m.data = nil
	delete(m.clearedFields, event.FieldData)
}

// SetSequence sets the "sequence" field.
func (m *EventMutation) SetSequence(u uint64) {
	m.sequence = &u
	m.addsequence = nil
}

// Sequence returns the value of the "sequence" field in the mutation.
func (m *EventMutation) Sequence() (r uint64, exists bool) {
	v := m.sequence
	if v == nil {
		return
	}
	return *v, true
}

// OldSequence returns the old "sequence" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldSequence(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSequence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSequence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSequence: %w", err)
	}
	return oldValue.Sequence, nil
}

// AddSequence adds u to the "sequence" field.
func (m *EventMutation) AddSequence(u int64) {
	if m.addsequence != nil {
		*m.addsequence += u
	} else {
		m.addsequence = &u
	}
}

// AddedSequence returns the value that was added to the "sequence" field in this mutation.
func (m *EventMutation) AddedSequence() (r int64, exists bool) {
	v := m.addsequence
	if v == nil {
		return
	}
	return *v, true
}

// ResetSequence resets all changes to the "sequence" field.
func (m *EventMutation) ResetSequence() {
	m.sequence = nil
	m.addsequence = nil
}

// SetPreviousAggregateSequence sets the "previous_aggregate_sequence" field.
func (m *EventMutation) SetPreviousAggregateSequence(u uint64) {
	m.previous_aggregate_sequence = &u
	m.addprevious_aggregate_sequence = nil
}

// PreviousAggregateSequence returns the value of the "previous_aggregate_sequence" field in the mutation.
func (m *EventMutation) PreviousAggregateSequence() (r uint64, exists bool) {
	v := m.previous_aggregate_sequence
	if v == nil {
		return
	}
	return *v, true
}

// OldPreviousAggregateSequence returns the old "previous_aggregate_sequence" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPreviousAggregateSequence(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreviousAggregateSequence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreviousAggregateSequence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreviousAggregateSequence: %w", err)
	}
	return oldValue.PreviousAggregateSequence, nil
}

// AddPreviousAggregateSequence adds u to the "previous_aggregate_sequence" field.
func (m *EventMutation) AddPreviousAggregateSequence(u int64) {
	if m.addprevious_aggregate_sequence != nil {
		*m.addprevious_aggregate_sequence += u
	} else {
		m.addprevious_aggregate_sequence = &u
	}
}

// AddedPreviousAggregateSequence returns the value that was added to the "previous_aggregate_sequence" field in this mutation.
func (m *EventMutation) AddedPreviousAggregateSequence() (r int64, exists bool) {
	v := m.addprevious_aggregate_sequence
	if v == nil {
		return
	}
	return *v, true
}

// ResetPreviousAggregateSequence resets all changes to the "previous_aggregate_sequence" field.
func (m *EventMutation) ResetPreviousAggregateSequence() {
	m.previous_aggregate_sequence = nil
	m.addprevious_aggregate_sequence = nil
}

// SetPreviousAggregateTypeSequence sets the "previous_aggregate_type_sequence" field.
func (m *EventMutation) SetPreviousAggregateTypeSequence(u uint64) {
	m.previous_aggregate_type_sequence = &u
	m.addprevious_aggregate_type_sequence = nil
}

// PreviousAggregateTypeSequence returns the value of the "previous_aggregate_type_sequence" field in the mutation.
func (m *EventMutation) PreviousAggregateTypeSequence() (r uint64, exists bool) {
	v := m.previous_aggregate_type_sequence
	if v == nil {
		return
	}
	return *v, true
}

// OldPreviousAggregateTypeSequence returns the old "previous_aggregate_type_sequence" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldPreviousAggregateTypeSequence(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreviousAggregateTypeSequence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreviousAggregateTypeSequence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreviousAggregateTypeSequence: %w", err)
	}
	return oldValue.PreviousAggregateTypeSequence, nil
}

// AddPreviousAggregateTypeSequence adds u to the "previous_aggregate_type_sequence" field.
func (m *EventMutation) AddPreviousAggregateTypeSequence(u int64) {
	if m.addprevious_aggregate_type_sequence != nil {
		*m.addprevious_aggregate_type_sequence += u
	} else {
		m.addprevious_aggregate_type_sequence = &u
	}
}

// AddedPreviousAggregateTypeSequence returns the value that was added to the "previous_aggregate_type_sequence" field in this mutation.
func (m *EventMutation) AddedPreviousAggregateTypeSequence() (r int64, exists bool) {
	v := m.addprevious_aggregate_type_sequence
	if v == nil {
		return
	}
	return *v, true
}

// ResetPreviousAggregateTypeSequence resets all changes to the "previous_aggregate_type_sequence" field.
func (m *EventMutation) ResetPreviousAggregateTypeSequence() {
	m.previous_aggregate_type_sequence = nil
	m.addprevious_aggregate_type_sequence = nil
}

// SetService sets the "service" field.
func (m *EventMutation) SetService(s string) {
	m.service = &s
}

// Service returns the value of the "service" field in the mutation.
func (m *EventMutation) Service() (r string, exists bool) {
	v := m.service
	if v == nil {
		return
	}
	return *v, true
}

// OldService returns the old "service" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldService(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldService is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldService requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldService: %w", err)
	}
	return oldValue.Service, nil
}

// ResetService resets all changes to the "service" field.
func (m *EventMutation) ResetService() {
	m.service = nil
}

// SetCreateTime sets the "create_time" field.
func (m *EventMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *EventMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *EventMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.aggregate_id != nil {
		fields = append(fields, event.FieldAggregateID)
	}
	if m.version != nil {
		fields = append(fields, event.FieldVersion)
	}
	if m.creator != nil {
		fields = append(fields, event.FieldCreator)
	}
	if m._type != nil {
		fields = append(fields, event.FieldType)
	}
	if m.aggregate_type != nil {
		fields = append(fields, event.FieldAggregateType)
	}
	if m.org_id != nil {
		fields = append(fields, event.FieldOrgID)
	}
	if m.instance_id != nil {
		fields = append(fields, event.FieldInstanceID)
	}
	if m.metadata != nil {
		fields = append(fields, event.FieldMetadata)
	}
	if m.data != nil {
		fields = append(fields, event.FieldData)
	}
	if m.sequence != nil {
		fields = append(fields, event.FieldSequence)
	}
	if m.previous_aggregate_sequence != nil {
		fields = append(fields, event.FieldPreviousAggregateSequence)
	}
	if m.previous_aggregate_type_sequence != nil {
		fields = append(fields, event.FieldPreviousAggregateTypeSequence)
	}
	if m.service != nil {
		fields = append(fields, event.FieldService)
	}
	if m.create_time != nil {
		fields = append(fields, event.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldAggregateID:
		return m.AggregateID()
	case event.FieldVersion:
		return m.Version()
	case event.FieldCreator:
		return m.Creator()
	case event.FieldType:
		return m.GetType()
	case event.FieldAggregateType:
		return m.AggregateType()
	case event.FieldOrgID:
		return m.OrgID()
	case event.FieldInstanceID:
		return m.InstanceID()
	case event.FieldMetadata:
		return m.Metadata()
	case event.FieldData:
		return m.Data()
	case event.FieldSequence:
		return m.Sequence()
	case event.FieldPreviousAggregateSequence:
		return m.PreviousAggregateSequence()
	case event.FieldPreviousAggregateTypeSequence:
		return m.PreviousAggregateTypeSequence()
	case event.FieldService:
		return m.Service()
	case event.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldAggregateID:
		return m.OldAggregateID(ctx)
	case event.FieldVersion:
		return m.OldVersion(ctx)
	case event.FieldCreator:
		return m.OldCreator(ctx)
	case event.FieldType:
		return m.OldType(ctx)
	case event.FieldAggregateType:
		return m.OldAggregateType(ctx)
	case event.FieldOrgID:
		return m.OldOrgID(ctx)
	case event.FieldInstanceID:
		return m.OldInstanceID(ctx)
	case event.FieldMetadata:
		return m.OldMetadata(ctx)
	case event.FieldData:
		return m.OldData(ctx)
	case event.FieldSequence:
		return m.OldSequence(ctx)
	case event.FieldPreviousAggregateSequence:
		return m.OldPreviousAggregateSequence(ctx)
	case event.FieldPreviousAggregateTypeSequence:
		return m.OldPreviousAggregateTypeSequence(ctx)
	case event.FieldService:
		return m.OldService(ctx)
	case event.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldAggregateID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAggregateID(v)
		return nil
	case event.FieldVersion:
		v, ok := value.(types.Version)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case event.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case event.FieldType:
		v, ok := value.(vo.EventType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case event.FieldAggregateType:
		v, ok := value.(vo.AggregateType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAggregateType(v)
		return nil
	case event.FieldOrgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case event.FieldInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceID(v)
		return nil
	case event.FieldMetadata:
		v, ok := value.(do.StringMap)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case event.FieldData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case event.FieldSequence:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSequence(v)
		return nil
	case event.FieldPreviousAggregateSequence:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreviousAggregateSequence(v)
		return nil
	case event.FieldPreviousAggregateTypeSequence:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreviousAggregateTypeSequence(v)
		return nil
	case event.FieldService:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetService(v)
		return nil
	case event.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	var fields []string
	if m.addsequence != nil {
		fields = append(fields, event.FieldSequence)
	}
	if m.addprevious_aggregate_sequence != nil {
		fields = append(fields, event.FieldPreviousAggregateSequence)
	}
	if m.addprevious_aggregate_type_sequence != nil {
		fields = append(fields, event.FieldPreviousAggregateTypeSequence)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case event.FieldSequence:
		return m.AddedSequence()
	case event.FieldPreviousAggregateSequence:
		return m.AddedPreviousAggregateSequence()
	case event.FieldPreviousAggregateTypeSequence:
		return m.AddedPreviousAggregateTypeSequence()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case event.FieldSequence:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSequence(v)
		return nil
	case event.FieldPreviousAggregateSequence:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPreviousAggregateSequence(v)
		return nil
	case event.FieldPreviousAggregateTypeSequence:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPreviousAggregateTypeSequence(v)
		return nil
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(event.FieldMetadata) {
		fields = append(fields, event.FieldMetadata)
	}
	if m.FieldCleared(event.FieldData) {
		fields = append(fields, event.FieldData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	switch name {
	case event.FieldMetadata:
		m.ClearMetadata()
		return nil
	case event.FieldData:
		m.ClearData()
		return nil
	}
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldAggregateID:
		m.ResetAggregateID()
		return nil
	case event.FieldVersion:
		m.ResetVersion()
		return nil
	case event.FieldCreator:
		m.ResetCreator()
		return nil
	case event.FieldType:
		m.ResetType()
		return nil
	case event.FieldAggregateType:
		m.ResetAggregateType()
		return nil
	case event.FieldOrgID:
		m.ResetOrgID()
		return nil
	case event.FieldInstanceID:
		m.ResetInstanceID()
		return nil
	case event.FieldMetadata:
		m.ResetMetadata()
		return nil
	case event.FieldData:
		m.ResetData()
		return nil
	case event.FieldSequence:
		m.ResetSequence()
		return nil
	case event.FieldPreviousAggregateSequence:
		m.ResetPreviousAggregateSequence()
		return nil
	case event.FieldPreviousAggregateTypeSequence:
		m.ResetPreviousAggregateTypeSequence()
		return nil
	case event.FieldService:
		m.ResetService()
		return nil
	case event.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Event edge %s", name)
}
